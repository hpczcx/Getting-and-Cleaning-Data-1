setwd("C:/Users/dsbmac/Documents/Professional Development/Getting and Cleaning Data/Quiz 3")
setwd("C:/Users/dsbmac/Documents/Professional Development/Getting and Cleaning Data/Quiz 3")
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if (!file.exists("data") {
  dir.create("data")
}
if (!file.exists("data")) {
  dir.create("data")
}
download.file(url1, destfile = "./data/jeff.jpg")
url1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
if (!file.exists("data")) {
  dir.create("data")
}
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
? load
? read
?? read
library("jpeg")
install.packages("jpeg")
library("jpeg")
readJPEG("./data/jeff.jpg", native = "TRUE")
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
readJPEG("./data/jeff.jpg", native = "TRUE")
url1 = "https://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
url1 = "http://d396qusza40orc.cloudfront.net/getdata%2Fjeff.jpg"
download.file(url1, destfile = "./data/jeff.jpg")
list.files("./data")
readJPEG("./data/jeff.jpg", native = "TRUE")
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
summary(pic)
quantile(pic)
quantile(pic, probs=seq(30, 80))
quantile(pic, probs=seq(0.30, 0.80))
quantile(pic, probs=seq(0.30))
quantile(pic, probs=c(0.1, 0.5, 1, 2, 5, 10, 50, NA)/100)
quantile(pic, probs=c(10, 30, 50, NA)/100)
quantile(pic, probs=c(10, 30, 50, 80)/100)
q()
quantile(pic, probs=c(10, 30, 50, 80)/100)
summary(pic)
str(pic)
quantile(pic, probs=c(10, 30, 50, 80)/100)
str(pic)
setwd("C:/Users/dsbmac/Documents/Professional Development/Getting and Cleaning Data/Quiz 3")
url2 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(url2, destfile = "./data/hid.csv")
hid = read.csv("./data/hid.csv")
str(hid)
x = subset(hid, hid$ACR == 3 & hid$AGS == 6)
str(x)
str(x)
x = which(with(hid, ACR==3 & AGS==6)
str(x)
x = which(with(hid, ACR==3 & AGS==6))
str(x)
x = (with(hid, ACR==3 & AGS==6))
str(x)
agricultureLogical = (with(hid, ACR==3 & AGS==6))
str(agricultureLogical)
which(agricultureLogical)
summary(pic)
head(pic)
tail(pic)
quantile(pic, probs=c(10, 30, 50, 80)/100, type=1)
quantile(pic, probs=c(10, 30, 50, 80)/100, type=2)
quantile(pic, c(10, 30, 50, 80)/100, type=2)
quantile(pic, c(30, 50, 80)/100, type=2)
url3 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
url4 = "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(url3, destfile = "./data/gdp.csv")
download.file(url4, destfile = "./data/education.csv")
gdp = read.csv("./data/gdp.csv")
edu = read.csv("./data/education.csv")
labels(gdp)
labels(edu)
str(gdp)
table(gdp$X, gdp$Gross.domestic.product.2012)
str(gdp)
str(edu)
gdp$X
edu$CountryCode
gdp$X %in% edu$CountryCode
table(gdp$X %in% edu$CountryCode)
q()
setwd("C:/Users/dsbmac/Documents/Professional Development/Getting and Cleaning Data/Quiz 3")
str(gdp)
str(edu)
table(edu$CountryCode)
labels(edu$CountryCode)
names(edu$CountryCode)
factors(edu$CountryCode)
str(edu$CountryCode)
labels(edu$CountryCode)
index(edu$CountryCode)
attributes(edu$CountryCode)
levels(edu$CountryCode)
str(gdp$CountryCode)
str(gdp)
str(gdp$X)
attributes(gdp$X)
levels(edu$CountryCode)
levels(gdp$X)
levels(edu$CountryCode)
levels(gdp$X)
x = ls(gdp$X)
y = ls(edu$CountryCode)
x %in% y
y = levels(edu$CountryCode)
x = levels(gdp$X)
x %in% y
table(x %in% y)
table(y %in% x)
? read.csv
gdp = read.csv("./data/gdp.csv",skip=1)
labels(gdp)
str(gdp)
x = levels(gdp$X)
table(x %in% y)
library(plyr)
gdp[,8:9] = NULL
gdp$X.9 = NULL
str(gdp)
gdp$X.8 = NULL
gdp$X.7 = NULL
gdp$X.6 = NULL
gdp$X.2 = NULL
str(gdp)
rename(gdp, "X"="CountryCode", "X.1"= "GDP")
rename(gdp, c("X"="CountryCode", "X.1"= "GDP"))
str(gdp)
rename(gdp, c(X="CountryCode", X.1= "GDP"))
str(gdp)
rename(gdp, c(X="CountryCode", X.1= "GDP", X.3= "Description"))
str(gdp)
gdp = rename(gdp, c(X="CountryCode", X.1= "GDP", X.3= "Description"))
str(gdp)
gdp = rename(gdp, c(X="CountryCode", "GDP"="Rank", X.3= "Description", X.4="GDP", X.5="Extra"))
str(gdp)
gdp[with(gdp, order(-GDP)), ]
gdp[with(gdp, order(GDP)), ]
gdp[with(gdp, order(GDP)), ]
x = subset(gdp, gdp$CountryCode != " ")
str(x)
y = subset(edu, CountryCode != " ")
str(y)
table(y$CountryCode %in% x$CountryCode)
order.gdp <- order(gdp$GDP)
order.gdp
order.gdp <- order(gdp$GDP)
gdp$GDP[order.gdp]
head(gdp$GDP[order.gdp])
gdp[order.gdp, ]
gdp[Rank,]
labels(gdp)
gdp[gdp$Rank,]
table(y$CountryCode %in% x$CountryCode)
str(gdp)
str(gdp[100])
str(gdp[,100])
str(gdp[:,100])
str(gdp[1,100])
str(gdp[100,1])
gdp
x = gdp[193,]
x
x = gdp[194,]
y = subset(edu, CountryCode != " ")
x
x = gdp[1:193,]
x
table(y$CountryCode %in% x$CountryCode)
head(pic)
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
quantile(pic, c(30, 50, 80)/100, type=2)
quantile(pic, probs = c(30, 50, 80)/100, type=2)
quantile(pic, probs = c(30, 50, 80)/100)
summary(pic)
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
summary(pic)
setwd("C:/Users/dsbmac/Documents/Professional Development/Getting and Cleaning Data/Quiz 3")
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
library("jpeg")
# load the image
pic = readJPEG("./data/jeff.jpg", native = "TRUE")
head(pic)
head(pic)
summary(pic)
quantile(pic, probs = c(30, 50, 80)/100)
labels(edu)
labels(edu$Income.Group)
levels(edu$Income.Group)
x = with(edu, CountryCode[Income.Group == "High income: nonOECD"])
x
y = with(gdp, Rank[CountryCode %in% x]) 
y
mean(y)
as.numeric(y)
mean(y)
y
class(y)
y = as.matrix(y)
class(y)
y
y = with(gdp, Rank[CountryCode %in% x]) 
str(y)
y[y==99] <- NA
str(y)
y
y = as.matrix(y)
as.numeric(y)
mean(y, na.rm=TRUE) 
class(y)
mean(y, na.rm=TRUE) 
#recode missing values
y
mean(y, na.rm=TRUE) 
y = with(gdp, Rank[CountryCode %in% x]) 
as.numeric(y)
class(y)
y[y==1] <- NA
str(y)
# exclude missing vals from analysis
mean(y, na.rm=TRUE) 
y
y = with(gdp, Rank[CountryCode %in% x]) 
y = as.matrix(y)
as.numeric(y)
y
y[y==""] <- NA
y
mean(y, na.rm=TRUE) 
as.numeric(y)
mean(y, na.rm=TRUE) 
class(y[1:1])
y = with(gdp, Rank[CountryCode %in% x]) 
y = as.matrix(y)
as.numeric(as.character(y))
class(y[1:1])
y = as.numeric(y)
class(y[1:1])
y
#recode missing values
y[y==""] <- NA
str(y)
mean(y, na.rm=TRUE) 
check = apply(m, 1, function(x) x %in% y)
check = apply(gdp, 1, function(x) x %in% y)
check
check = apply(gdp, 1, function(a) a %in% x)
check
x
check = apply(gdp$CountryCode, 1, function(a) a %in% x)
check = apply(gdp$CountryCode, 2, function(a) a %in% x)
check
check = apply(gdp$CountryCode, 2, function(a) a %in% x)
check = sapply(gdp$CountryCode, function(a) a %in% x)
check
gdp$check = check
y = with(gdp, Rank[check]) 
y
y = as.matrix(y)
y = as.numeric(y)
class(y[1:1])
y
#recode missing values
y[y==""] <- NA
str(y)
# exclude missing vals from analysis
mean(y, na.rm=TRUE) 
labels(edu)
levels(edu$Income.Group)
highIncOECD = with(edu, CountryCode[Income.Group == "High income: OECD"])
check2 = sapply(gdp$CountryCode, function(a) a %in% highIncOECD)
check2
gdp$check2 = check2
y2 = with(gdp, Rank[check2]) 
y = with(gdp, Rank[check2]) 
y
y = as.matrix(y)
y = as.numeric(y)
class(y[1:1])
y
y[y==""] <- NA
str(y)
mean(y, na.rm=TRUE) 
names(gdp)
names(edu)
gdp = rename(gdp, c("CountryCode"="CountryCode1"))
names(gdp)
mergedData = merge(gdp, edu)
str(mergedData)
labels(edu)
attributes(edu.Income.Group)
attributes(edu$Income.Group)
attributes(edu$Income.Group)
result = data[gdp$Rank <= 38 & gdp$Income.Group == "Lower middle income"]
result = mergedData[gdp$Rank <= 38 & gdp$Income.Group == "Lower middle income"]
levels(gdp$Rank)
result = mergedData[gdp$Income.Group == "Lower middle income"]
result
result = mergedData[Income.Group == "Lower middle income"]
result = mergedData[mergedData$Income.Group == "Lower middle income"]
result = mergedData[mergedData$Income.Group == "Lower middle income"]
str(result)
result
attributes(mergedData$Income.Group)
result = with(mergedData, Income.Group == "Lower middle income") 
str(result)
table(result)
result = subset(mergedData, Income.Group == "Lower middle income") 
str(result)
levels(mergedData$Rank)
as.numeric(mergedData$Rank)
str(result)
table(result$Rank)
result$Rank
q()
